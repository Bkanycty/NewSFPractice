from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum


class Author(models.Model):
    # Модель, содержащая объекты всех авторов.
    # Имеет следующие поля:
    # cвязь «один к одному» с встроенной моделью пользователей User;

    authorUser = models.OneToOneField(User, on_delete=models.CASCADE)
    ratingAuthor = models.SmallIntegerField(default=0)

    # рейтинг пользователя. Ниже будет дано описание того, как этот рейтинг можно посчитать.
    def update_rating(self):
        # обновляет рейтинг пользователя, переданный в аргумент этого метода.
        # Он состоит из следующего:
        # суммарный рейтинг каждой статьи автора умножается на 3;
        # суммарный рейтинг всех комментариев автора;
        # суммарный рейтинг всех комментариев к статьям автора.

        postRat = self.post_set.aggregate(postRating=Sum('rating'))
        pRat = 0
        pRat += postRat.get('postRating')

        commentRat = self.authorUser.comment_set.aggregate(commentRating=Sum('rating'))
        cRat = 0
        cRat += commentRat.get('commentRating')

        self.ratingAuthor = pRat * 3 + cRat
        self.save()


class Category(models.Model):
    # Категории новостей/статей — темы, которые они отражают (спорт, политика, образование и т. д.).
    # Имеет единственное поле: название категории.
    # Поле должно быть уникальным (в определении поля необходимо написать параметр unique = True).
    name = models.CharField(max_length=64, unique=True)


class Post(models.Model):
    # Эта модель должна содержать в себе статьи и новости, которые создают пользователи.
    # Каждый объект может иметь одну или несколько категорий.
    # Соответственно, модель должна включать следующие поля:
    # связь «один ко многим» с моделью Author;
    author = models.ForeignKey(Author, on_delete=models.CASCADE)

    # поле с выбором — «статья» или «новость»;
    NEWS = 'NW'
    ARTICLE = 'AR'
    CATEGORY_CHOICES = (
        (NEWS, 'Новость'),
        (ARTICLE, 'Статья')
    )
    categoryType = models.CharField(max_length=2, choices=CATEGORY_CHOICES, default=ARTICLE)

    # автоматически добавляемая дата и время создания;
    dateCreation = models.DateTimeField(auto_now_add=True)

    # связь «многие ко многим» с моделью Category (с дополнительной моделью PostCategory);
    postCategory = models.ManyToManyField(Category, through='postCategory')

    # заголовок статьи/новости;
    title = models.CharField(max_length=128)

    # текст статьи/новости;
    text = models.TextField()

    # рейтинг статьи/новости.
    rating = models.SmallIntegerField(default=0)

    def preview(self):
        # возвращает начало статьи (предварительный просмотр) длиной 124 символа и добавляет многоточие в конце.
        return f'{self.text[0:124]} ...'

    def like(self):
        # увеличивают/уменьшают рейтинг на единицу
        self.rating += 1
        self.save()

    def dislike(self):
        # увеличивают/уменьшают рейтинг на единицу
        self.rating -= 1
        self.save()




class PostCategory(models.Model):
    #     Промежуточная модель для связи «многие ко многим»:
    # связь «один ко многим» с моделью Post;
    postTrough = models.ForeignKey(Post, on_delete=models.CASCADE)

    # связь «один ко многим» с моделью Category.
    categoryTrough = models.ForeignKey(Category, on_delete=models.CASCADE)


class Comment(models.Model):
    # Под каждой новостью/статьёй можно оставлять комментарии, поэтому необходимо организовать их способ хранения тоже.
    # Модель будет иметь следующие поля:
    # связь «один ко многим» с моделью Post;
    commentPost = models.ForeignKey(Post, on_delete=models.CASCADE)

    # связь «один ко многим» со встроенной моделью User (комментарии может оставить любой пользователь, необязательно автор);
    commentUser = models.ForeignKey(User, on_delete=models.CASCADE)

    # текст комментария;
    text = models.TextField()

    # дата и время создания комментария;
    dateCreation = models.DateTimeField(auto_now_add=True)

    # рейтинг комментария.
    rating = models.SmallIntegerField(default=0)

    def like(self):
        # увеличивают/уменьшают рейтинг на единицу
        self.rating += 1
        self.save()

    def dislike(self):
        # увеличивают/уменьшают рейтинг на единицу
        self.rating -= 1
        self.save()


# Что вы должны сделать в консоли Django?
#
# Создать двух пользователей (с помощью метода User.objects.create_user('username')).
user1 = User.objects.create_user('Умный Человек')
user2 = User.objects.create_user('Некий Идиот')

# Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

# Добавить 4 категории в модель Category.
Category.objects.create(name='Политика')
Category.objects.create(name='Технологии')
Category.objects.create(name='Юмор')
Category.objects.create(name='Игры')

# Добавить 2 статьи и 1 новость.
author1 = Author.objects.get(id=1)
Post.objects.create(author=author1, categoryType='AR', title='Название статьи Умного Человека', text='Текст статьи Умного Человека')
Post.objects.create(author=author1, categoryType='NW', title='Название новости Умного Человека', text='И поэтому все так произошло')
author2 = Author.objects.get(id=2)
Post.objects.create(author=author2, categoryType='AR', title='Название статьи Некого Идиота', text='Я не понял, как это произошло')

# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4))
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1))

# Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='Какой я молодец, такую статью написал!')
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='Фигня какая-то, ничего не понял')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='Ничего смешного')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='Виновато правительство')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='Потому что мне некомфортно думать, что виноват я')

# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(id=1).like()
for i in range(5):
	Post.objects.get(id=2).dislike()
for i in range(10):
	Post.objects.get(id=3).like()

Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=1).dislike()

# Обновить рейтинги пользователей.
author1.update_rating()
author2.update_rating()

# Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best = Author.objects.order_by('-ratingAuthor')[:1]
for i in best:
	f'Лучший пользователь'
	f''
	f'username: {i.authorUser.username}'
	f'рейтинг: {i.ratingAuthor}'
	f''

# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
bestArticle = Post.objects.order_by('-rating')[:1]
for i in bestArticle:
	f'Лучшая статья'
	f''
	f'Дата добавления: {str(i.dateCreation)[0:19]}'
	f'username автора: {i.author.authorUser}'
	f'рейтинг: {i.rating}'
	f'заголовок: {i.title}'
	f'превью: {i.preview()}'
	f''

# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
commentsBest = Comment.objects.filter(commentPost=Post.objects.order_by('-rating')[:1])
for i in commentsBest:
	f'дата: {str(i.dateCreation)[0:19]}'
	f'пользователь: {i.commentUser}'
	f'рейтинг: {i.rating}'
	f'текст: {i.text}'
	f''

# или некрасивый вариант:
Comment.objects.filter(commentPost=Post.objects.order_by('-rating')[0]).values('dateCreation', 'commentUser', 'rating', 'text')

